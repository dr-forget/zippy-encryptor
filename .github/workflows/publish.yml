name: Build and Publish Node Addon

on:
  workflow_dispatch: # 允许手动触发工作流

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            platform: darwin
            arch: x64
            target: x86_64-apple-darwin
          - os: macos-latest
            platform: darwin
            arch: arm64
            target: aarch64-apple-darwin
          - os: windows-latest
            platform: win32
            arch: x64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            platform: win32
            arch: ia32
            target: i686-pc-windows-msvc
          - os: ubuntu-latest
            platform: android
            arch: arm64
            target: aarch64-linux-android
          - os: ubuntu-latest
            platform: android
            arch: arm
            target: armv7-linux-androideabi

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          cache: "npm"

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation toolchain for aarch64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set Rust linker for aarch64-unknown-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Install dependencies
        run: npm ci

      - name: Build native addon for specific target
        run: npx napi build --platform --release --target ${{ matrix.target }}

      - name: Run additional build scripts
        run: |
          node build.js
          node convert.js

      - name: Copy built files to output directory (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          find . -maxdepth 2 -name "*.node" -exec cp {} zippy-encyptor/ \;
        shell: bash

      - name: Copy built files to output directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          for %%i in (*.node) do copy "%%i" zippy-encyptor\
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-addon-${{ matrix.target }}
          path: zippy-encyptor/
          retention-days: 7

  collect-artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create output directory
        run: mkdir -p zippy-encyptor

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Combine artifacts
        run: |
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/* zippy-encyptor/ || echo "No files to copy from $dir"
            fi
          done

      - name: List combined files
        run: |
          echo "Summary of built platform binaries:"
          find zippy-encyptor/ -name "*.node" -type f | sort || echo "No .node files found"

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-addons-all-platforms
          path: zippy-encyptor/
          retention-days: 7
